// Generated by CoffeeScript 2.3.2
var num, regx, walk;

regx = /([.\/][^.\/\[\<\s]+|\[[-+]?\d+\]|\[(?:"[^"]+"|'[^']+')\])/;

module.exports = {
  get: function(data, path, valu) {
    var i, len, list, prop;
    list = walk(path);
    for (i = 0, len = list.length; i < len; i++) {
      prop = list[i];
      if (!((data != null) && typeof data === 'object')) {
        return valu;
      }
      if (num(prop) && Array.isArray(data) && +prop < 0) {
        prop = data.length + prop;
      }
      data = data[prop];
    }
    if (data != null) {
      return data;
    } else {
      return valu;
    }
  },
  set: function(data, path, valu) {
    var i, last, len, list, next, prop, slot;
    list = walk(path);
    last = list.length - 1;
    for (slot = i = 0, len = list.length; i < len; slot = ++i) {
      prop = list[slot];
      if (slot === last) {
        next = valu;
      } else {
        if (num(prop) && Array.isArray(data) && +prop < 0) {
          prop = data.length + prop;
        }
        next = data[prop];
        if (next == null) {
          next = void 0;
        }
        if (typeof next !== 'object') {
          next = (num(list[slot + 1]) ? [] : {});
        }
      }
      data = data[prop] = next;
    }
    return data;
  }
};

num = function(val) {
  return /^-?(\d+)$/.test(val);
};

walk = function(path) {
  var chr, i, len, list, part, results;
  list = ('.' + path).split(regx);
  list.shift();
  results = [];
  for (i = 0, len = list.length; i < len; i += 2) {
    part = list[i];
    switch (chr = part[0]) {
      case '.':
      case '/':
        results.push(part.slice(1));
        break;
      case '[':
        if (part[1] === '"' || part[1] === "'") {
          results.push(part.slice(2, -2));
        } else {
          results.push(+(part.slice(1, -1)));
        }
        break;
      default:
        continue;
    }
  }
  return results;
};
